/* Optimized production build generated by CommandKit */
import {
  MUserBlacklist
} from "./chunk-QJI4AMEY.js";
import {
  sendErrorReport
} from "./chunk-VU34SGHU.js";
import {
  emojis,
  main
} from "./chunk-GSB7PNNP.js";
import {
  __name
} from "./chunk-4HQ2LG3N.js";

// src/subcommands/blacklist/src/revoke/src/user.ts
import axios from "axios";
import { EmbedBuilder } from "discord.js";
var ROWiFiToken = `Bot ${process.env.ROWIFI_TOKEN}`;
var fail = emojis.red_cross;
var success = emojis.green_checkmark;
async function user_default({ client, interaction }) {
  await interaction.deferReply({ ephemeral: true });
  const robloxID = interaction.options.getNumber("id");
  const reason = interaction.options.getString("reason");
  const blacklistDoc = await MUserBlacklist.findOne({ user_id: robloxID });
  if (!blacklistDoc) {
    await interaction.followUp(`${fail} Blacklist not found.`);
    return;
  }
  if (blacklistDoc.revoked) {
    await interaction.followUp(`${fail} This blacklist is already revoked!`);
    return;
  }
  await blacklistDoc.updateOne({ $set: {
    revoked: true,
    revoke_reason: reason,
    revoked_by: interaction.user.id
  } });
  const updatedBlacklistDoc = await MUserBlacklist.findOne({ user_id: robloxID });
  if (!updatedBlacklistDoc)
    return;
  let doReturn = false;
  const rowifiBlacklistUrl = `https://api.rowifi.xyz/v2/guilds/${main.mainServer}/blacklists`;
  const rowifiBlacklistList = await axios.get(rowifiBlacklistUrl, { headers: { Authorization: ROWiFiToken } }).catch(async (e) => {
    await sendErrorReport({ error: e, description: "getting blacklist list for /blacklist revoke user", interaction });
    doReturn = true;
  });
  if (doReturn)
    return;
  const rowifiBlacklist = rowifiBlacklistList.data.find((b) => {
    if (b.user_id) {
      return b.user_id === robloxID;
    }
  });
  await axios.delete(rowifiBlacklistUrl, { headers: { Authorization: ROWiFiToken }, data: [rowifiBlacklist?.blacklist_id] }).catch(() => null);
  const embed = new EmbedBuilder().setTitle("Blacklist revoked.").setDescription(
    `**Blacklisted by:** <@!${updatedBlacklistDoc.blacklisted_by}>

` + (updatedBlacklistDoc?.dc_user_id ? `**User:** <@!${updatedBlacklistDoc.dc_user_id}>
` : "") + (updatedBlacklistDoc?.dc_user_name ? `**User name:** ${updatedBlacklistDoc.dc_user_name}
` : "") + (updatedBlacklistDoc?.dc_user_id ? `**User id:** ${updatedBlacklistDoc.dc_user_id}
` : "") + `**Roblox user:** ${updatedBlacklistDoc.user_name}
**Roblox User Id:** ${updatedBlacklistDoc.user_id}
**Reason:** ${updatedBlacklistDoc.reason}

**Revoked by:** <@!${updatedBlacklistDoc.revoked_by}>
**Revoke reason:** ${updatedBlacklistDoc.revoke_reason}
`
  ).setColor("Red");
  const blacklistsChannel = await client.channels.fetch(main.blacklistsChannel);
  if (blacklistsChannel?.isTextBased()) {
    await blacklistsChannel.send({ embeds: [embed] });
  }
  await interaction.followUp(`${success} Success!`);
}
__name(user_default, "default");

export {
  user_default
};
