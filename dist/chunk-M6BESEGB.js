/* Optimized production build generated by CommandKit */
import {
  MUserBlacklist
} from "./chunk-QJI4AMEY.js";
import {
  sendErrorReport
} from "./chunk-VU34SGHU.js";
import {
  emojis,
  main
} from "./chunk-GSB7PNNP.js";
import {
  __name
} from "./chunk-4HQ2LG3N.js";

// src/subcommands/blacklist/src/roblox.ts
import axios from "axios";
import { EmbedBuilder } from "discord.js";
import { isSnowflake } from "discord-snowflake";
var ROWiFiToken = `Bot ${process.env.ROWIFI_TOKEN}`;
var fail = emojis.red_cross;
var success = emojis.green_checkmark;
async function roblox_default({ client, interaction }) {
  let isError = false;
  await interaction.deferReply({ ephemeral: true });
  const robloxID = interaction.options.getNumber("id");
  const reason = interaction.options.getString("reason");
  const discordID = interaction.options.getString("discord-id");
  const discordName = interaction.options.getString("discord-name");
  if (discordID && !isSnowflake(discordID)) {
    await interaction.followUp(`${emojis.red_cross} You have to put in a valid discord id.`);
    return;
  }
  if (discordID && !discordName || !discordID && discordName) {
    await interaction.followUp(`${fail} You have to put in either both or none discord parameters.`);
    return;
  }
  const robloxUserGetUrl = `https://users.roblox.com/v1/users/${robloxID}`;
  const robloxUserAxiosObj = await axios.get(robloxUserGetUrl).catch(async (e) => {
    if (e.response.status === 404) {
      await interaction.followUp(`${fail} User not found.`);
      isError = true;
      return;
    }
    await sendErrorReport({ interaction, description: "getting roblox user in /blacklist roblox", error: e });
    isError = true;
  });
  if (isError)
    return;
  const robloxUser = robloxUserAxiosObj.data;
  const tempBlacklistTest = await MUserBlacklist.findOne({ user_id: robloxUser.id });
  if (tempBlacklistTest) {
    if (!tempBlacklistTest.revoked) {
      await interaction.followUp(`${fail} This user is already blacklisted.`);
      return;
    } else {
      await tempBlacklistTest.deleteOne();
    }
  }
  let embed;
  let blacklistDoc;
  if (discordID) {
    blacklistDoc = await MUserBlacklist.create({
      user_id: robloxUser.id,
      user_name: robloxUser.name,
      dc_user_id: discordID,
      dc_user_name: discordName,
      reason,
      blacklisted_by: interaction.user.id
    });
    embed = new EmbedBuilder().setTitle("Blacklist.").setDescription(
      `**Blacklisted by:** <@!${blacklistDoc.blacklisted_by}>

**User:** <@!${blacklistDoc.dc_user_id}>
**User name:** ${blacklistDoc.dc_user_name}
**User id:** ${blacklistDoc.dc_user_id}
**Roblox user:** ${blacklistDoc.user_name}
**Roblox User Id:** ${blacklistDoc.user_id}
**Reason:** ${blacklistDoc.reason}
`
    ).setColor("Red");
  } else {
    blacklistDoc = await MUserBlacklist.create({
      user_id: robloxUser.id,
      user_name: robloxUser.name,
      reason,
      blacklisted_by: interaction.user.id
    });
    embed = new EmbedBuilder().setTitle("Blacklist.").setDescription(
      `**Blacklisted by:** <@!${blacklistDoc.blacklisted_by}>

**User:** N/A
**Roblox user:** ${blacklistDoc.user_name}
**Roblox User Id:** ${blacklistDoc.user_id}
**Reason:** ${blacklistDoc.reason}
`
    ).setColor("Red");
  }
  const rowifiBlacklistUrl = `https://api.rowifi.xyz/v2/guilds/${main.mainServer}/blacklists`;
  await axios.post(rowifiBlacklistUrl, {
    reason,
    kind: 0,
    user_id: robloxUser.id
  }, { headers: { Authorization: ROWiFiToken, "Content-Type": "application/json" } }).catch(async (e) => {
    await sendErrorReport({ interaction, description: "creating RoWifi blacklist for /blacklist discord", error: e });
    isError = true;
  });
  if (isError)
    return;
  embed = new EmbedBuilder().setTitle("Blacklist.").setDescription(
    `**Blacklisted by:** <@!${blacklistDoc.blacklisted_by}>

**Roblox user:** ${blacklistDoc.user_name}
**Roblox User Id:** ${blacklistDoc.user_id}
**Reason:** ${blacklistDoc.reason}
`
  ).setColor("Red");
  const blacklistsChannel = await interaction.guild?.channels.fetch(main.blacklistsChannel);
  if (!blacklistsChannel?.isTextBased())
    return;
  await blacklistsChannel.send({ embeds: [embed] });
  if (discordID) {
    await interaction.guild?.bans.create(blacklistDoc.dc_user_id, { reason: `Blacklisted by: ${interaction.user.username}, reason: ${reason}`, deleteMessageSeconds: 0 });
  }
  await interaction.followUp(`${success} Success!`);
}
__name(roblox_default, "default");

export {
  roblox_default
};
