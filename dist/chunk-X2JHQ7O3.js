/* Optimized production build generated by CommandKit */
import {
  MServerBlacklist
} from "./chunk-D2YV6SHV.js";
import {
  sendErrorReport
} from "./chunk-VU34SGHU.js";
import {
  main
} from "./chunk-GSB7PNNP.js";
import {
  __name
} from "./chunk-4HQ2LG3N.js";

// src/subcommands/blacklist/src/server.ts
import { EmbedBuilder } from "discord.js";
import axios from "axios";
var ROWiFiToken = `Bot ${process.env.ROWIFI_TOKEN}`;
async function server_default({ interaction }) {
  await interaction.deferReply({ ephemeral: true });
  let isError = false;
  const id = interaction.options.getString("id");
  const serverName = interaction.options.getString("server-name");
  const reason = interaction.options.getString("reason");
  const robloxGroupID = interaction.options.getNumber("roblox-group-id");
  const tempBlacklistTest = await MServerBlacklist.findOne({ discord_id: id });
  if (tempBlacklistTest) {
    if (!tempBlacklistTest.revoked) {
      await interaction.followUp(`\u274C This server is already blacklisted.`);
      return;
    } else {
      await tempBlacklistTest.deleteOne();
    }
  }
  const robloxGroupResponce = robloxGroupID ? await axios.get(`https://groups.roblox.com/v2/groups/?groupIds=${robloxGroupID}`).catch(async (e) => {
    isError = true;
    if (e.response.status === 400) {
      await interaction.followUp(`\u274C Roblox group not found.`);
      return;
    }
    await sendErrorReport({ interaction, description: "getting roblox group in /blacklist server", error: e });
    return;
  }) : null;
  if (isError)
    return;
  const embed = new EmbedBuilder();
  if (robloxGroupID) {
    if (!robloxGroupResponce)
      return;
    const robloxGroup = robloxGroupResponce.data.data.at(0);
    if (!robloxGroup)
      return;
    embed.setTitle("Server blacklist!").setDescription(
      `**Blacklisted by:** <@!${interaction.user.id}>

**Server:** ${serverName}
**Server ID:** ${id}
**Roblox group:** ${robloxGroup.name}
**Roblox group ID:** ${robloxGroupID}
**Reason:** ${reason}
`
    ).setColor("Red");
  } else {
    embed.setTitle("Server blacklist!").setDescription(
      `**Blacklisted by:** <@!${interaction.user.id}>

**Server:** ${serverName}
**Server ID:** ${id}
**Reason:** ${reason}
`
    ).setColor("Red");
  }
  if (robloxGroupID) {
    await MServerBlacklist.create({
      discord_id: id,
      discord_name: serverName,
      roblox_group_id: robloxGroupID,
      blacklisted_by: interaction.user.id,
      reason
    });
    const rowifiBlacklistUrl = `https://api.rowifi.xyz/v2/guilds/${main.mainServer}/blacklists`;
    await axios.post(
      rowifiBlacklistUrl,
      {
        reason,
        kind: 1,
        group_id: robloxGroupID
      },
      { headers: { Authorization: ROWiFiToken, "Content-Type": "application/json" } }
    ).catch(async (e) => {
      await sendErrorReport({ interaction, description: "creating RoWifi blacklist for /blacklist server", error: e });
      isError = true;
    });
    if (isError)
      return;
  } else {
    await MServerBlacklist.create({
      discord_id: id,
      discord_name: serverName,
      blacklisted_by: interaction.user.id,
      reason
    });
  }
  const blacklistsChannel = await interaction.guild?.channels.fetch(main.blacklistsChannel);
  if (!blacklistsChannel?.isTextBased())
    return;
  await blacklistsChannel.send({ embeds: [embed] });
  await interaction.followUp(`\u2705 Success!`);
}
__name(server_default, "default");

export {
  server_default
};
