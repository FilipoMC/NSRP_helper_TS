/* Optimized production build generated by CommandKit */
import {
  MUserBlacklist
} from "./chunk-QJI4AMEY.js";
import {
  sendErrorReport
} from "./chunk-VU34SGHU.js";
import {
  emojis,
  main,
  ranks
} from "./chunk-GSB7PNNP.js";
import {
  __name
} from "./chunk-4HQ2LG3N.js";

// src/subcommands/blacklist/src/discord.ts
import "dotenv/config";
import { EmbedBuilder } from "discord.js";
import axios from "axios";
var ROWiFiToken = `Bot ${process.env.ROWIFI_TOKEN}`;
var fail = emojis.red_cross;
var success = emojis.green_checkmark;
var partialSuccess = emojis.yellow_checkmark;
async function discord_default({ client, interaction }) {
  let isError = false;
  await interaction.deferReply({ ephemeral: true });
  const memberToBlacklist = interaction.options.getMember("member");
  const reason = interaction.options.getString("reason");
  if (memberToBlacklist.user.id === interaction.user.id) {
    await interaction.followUp(`${fail} You cannot blacklist yourself.`);
    return;
  }
  if (memberToBlacklist.roles.cache.has(ranks.categories.ls)) {
    await interaction.followUp(`${fail} You cannot blacklist LS members.`);
    return;
  }
  const rowifiGetUrl = `https://api.rowifi.xyz/v2/guilds/${main.mainServer}/members/${memberToBlacklist.user.id}`;
  const rowifiUserAxiosObj = await axios.get(rowifiGetUrl, { headers: { Authorization: ROWiFiToken } }).catch(async (e) => {
    if (e.response.status === 404) {
      await interaction.followUp(`${fail} User not found.`);
      isError = true;
      return;
    }
    await sendErrorReport({ interaction, description: "getting user from RoWiFi in /blacklist discord", error: e });
    isError = true;
  });
  if (isError)
    return;
  const rowifiUser = rowifiUserAxiosObj.data;
  const robloxUserGetUrl = `https://users.roblox.com/v1/users/${rowifiUser.roblox_id}`;
  const robloxUserAxiosObj = await axios.get(robloxUserGetUrl).catch(async (e) => {
    if (e.response.status === 404) {
      await interaction.followUp(`${fail} User not found.`);
      isError = true;
      return;
    }
    await sendErrorReport({ interaction, description: "getting user from roblox in /blacklist discord", error: e });
    isError = true;
  });
  if (isError)
    return;
  const robloxUser = robloxUserAxiosObj.data;
  const tempBlacklistTest = await MUserBlacklist.findOne({ user_id: robloxUser.id });
  if (tempBlacklistTest) {
    if (!tempBlacklistTest.revoked) {
      await interaction.followUp(`${fail} This user is already blacklisted.`);
      return;
    } else {
      await tempBlacklistTest.deleteOne();
    }
  }
  const blacklistDoc = await MUserBlacklist.create({
    user_id: robloxUser.id,
    user_name: robloxUser.name,
    dc_user_id: memberToBlacklist.user.id,
    dc_user_name: memberToBlacklist.user.username,
    reason,
    blacklisted_by: interaction.user.id
  });
  const rowifiBlacklistUrl = `https://api.rowifi.xyz/v2/guilds/${main.mainServer}/blacklists`;
  await axios.post(rowifiBlacklistUrl, {
    reason,
    kind: 0,
    user_id: robloxUser.id
  }, { headers: { Authorization: ROWiFiToken, "Content-Type": "application/json" } }).catch(async (e) => {
    await sendErrorReport({ interaction, description: "creating RoWifi blacklist for /blacklist discord", error: e });
    isError = true;
  });
  if (isError)
    return;
  const embed = new EmbedBuilder().setTitle("Blacklist.").setDescription(
    `**Blacklisted by:** <@!${blacklistDoc.blacklisted_by}>

**User:** <@!${blacklistDoc.dc_user_id}>
**User name:** ${blacklistDoc.dc_user_name}
**User id:** ${blacklistDoc.dc_user_id}
**Roblox user:** ${blacklistDoc.user_name}
**Roblox User Id:** ${blacklistDoc.user_id}
**Reason:** ${blacklistDoc.reason}
`
  ).setColor("Red");
  const embedDM = new EmbedBuilder().setTitle("You have been blacklisted.").setDescription(
    `**You have been blacklisted.**

**Blacklisted by:** ${interaction.user} (${interaction.user.username})
**Reason:** ${reason}`
  );
  await memberToBlacklist.user.send({ embeds: [embedDM] });
  const blacklistsChannel = await interaction.guild?.channels.fetch(main.blacklistsChannel);
  if (!blacklistsChannel?.isTextBased())
    return;
  await blacklistsChannel.send({ embeds: [embed] });
  const blacklistedBy = interaction.user;
  await memberToBlacklist.ban({ reason: `Blacklisted by: ${blacklistedBy?.username}, reason: ${blacklistDoc.reason}`, deleteMessageSeconds: 0 }).catch(async () => {
    await interaction.followUp(`${partialSuccess} Successfully blacklisted the user, but couldn't ban them from the server.`);
    isError = true;
  });
  if (isError)
    return;
  await interaction.followUp(`${success} Success!`);
}
__name(discord_default, "default");

export {
  discord_default
};
