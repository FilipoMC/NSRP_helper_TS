/* Optimized production build generated by CommandKit */
import {
  partner_default
} from "../../chunk-B7YJR6CE.js";
import "../../chunk-PWCLR54I.js";
import "../../chunk-KQOFLOZ3.js";
import "../../chunk-OWA4SLP5.js";
import "../../chunk-WERYLS43.js";
import "../../chunk-APROKYTT.js";
import "../../chunk-O5S3SRR7.js";
import "../../chunk-7AILDUPC.js";
import "../../chunk-PGMA3JWT.js";
import "../../chunk-GSB7PNNP.js";
import "../../chunk-WIIT5IFE.js";
import "../../chunk-G4V434ME.js";
import "../../chunk-6MFSAH6G.js";
import "../../chunk-CN2PQJ3T.js";
import "../../chunk-67IWWM7G.js";
import {
  __name
} from "../../chunk-4HQ2LG3N.js";

// src/commands/partnership/partner.ts
import { SlashCommandBuilder } from "discord.js";
var data = new SlashCommandBuilder().setName("partner").setDescription("Send partnership questions111gfh").setDMPermission(false).addSubcommand(
  (s) => s.setName("send-questions").setDescription("Send partnership questions.").addUserOption(
    (o) => o.setName("user").setDescription("User to ping.").setRequired(false)
  )
).addSubcommand(
  (s) => s.setName("create").setDescription("Make a new partnership (send ad, send log, log in database)").addUserOption(
    (o) => o.setName("rep").setDescription("The server representative.").setRequired(true)
  ).addBooleanOption(
    (o) => o.setName("ping").setDescription("Should the ad be sent with ping?").setRequired(true)
  ).addBooleanOption(
    (o) => o.setName("prompt").setDescription("Prompt the user to confirm that they've sent the ad.").setRequired(true)
  )
).addSubcommand(
  (s) => s.setName("resend-ad").setDescription("Send the ad to partnerships channel, without making a new partnership.").addStringOption(
    (o) => o.setName("id").setDescription("ID of the log message.").setRequired(true)
  )
).addSubcommand(
  (s) => s.setName("find").setDescription("Find a partnership").addStringOption(
    (o) => o.setName("id").setDescription("ID of the log message.").setRequired(true)
  )
).addSubcommand(
  (s) => s.setName("find-by-user").setDescription("Find all partnerships by user").addUserOption(
    (o) => o.setName("user").setDescription("User to find partnerships.").setRequired(false)
  ).addStringOption(
    (o) => o.setName("id").setDescription("ID of the user.").setRequired(false)
  )
).addSubcommand(
  (s) => s.setName("terminate").setDescription("Terminate a partnership").addStringOption(
    (o) => o.setName("id").setDescription("ID of the log message.").setRequired(true)
  ).addStringOption(
    (o) => o.setName("reason").setDescription("Reason of the termination").setRequired(true)
  )
);
async function run({ client, interaction, handler }) {
  const subcommand = interaction.options.getSubcommand();
  switch (subcommand) {
    case "send-questions":
      await partner_default.questions({ interaction, client });
      break;
    case "create":
      await partner_default.create({ interaction, client });
      break;
    case "resend-ad":
      await partner_default.resendAd({ interaction, client });
      break;
    case "find":
      await partner_default.find({ interaction, client });
      break;
    case "find-by-user":
      await partner_default.findByUser({ interaction, client });
      break;
    case "terminate":
      await partner_default.terminate({ interaction, client });
      break;
  }
}
__name(run, "run");
var options = {
  useCategoryPerms: true
};
export {
  data,
  options,
  run
};
