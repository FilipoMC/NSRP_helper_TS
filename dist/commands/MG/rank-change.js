/* Optimized production build generated by CommandKit */
import {
  emojis,
  ranks
} from "../../chunk-GSB7PNNP.js";
import "../../chunk-WIIT5IFE.js";
import "../../chunk-G4V434ME.js";
import "../../chunk-6MFSAH6G.js";
import "../../chunk-CN2PQJ3T.js";
import "../../chunk-67IWWM7G.js";
import {
  __name
} from "../../chunk-4HQ2LG3N.js";

// src/commands/MG/rank-change.ts
import { EmbedBuilder, SlashCommandBuilder } from "discord.js";
var data = new SlashCommandBuilder().setName("rank-change").setDescription("Promote or demote a staff member.").setDMPermission(false).addStringOption(
  (o) => o.setName("action").setDescription("Action to make").addChoices([
    { name: "Promote", value: "promote" },
    { name: "Demote", value: "demote" }
  ]).setRequired(true)
).addUserOption(
  (o) => o.setName("member").setDescription("Staff member to take the action on").setRequired(true)
).addRoleOption(
  (o) => o.setName("before").setDescription("Rank before the action.").setRequired(true)
).addRoleOption(
  (o) => o.setName("after").setDescription("Rank after the action").setRequired(true)
).addStringOption(
  (o) => o.setName("reason").setDescription("Reason of the action").setRequired(true)
).addStringOption(
  (o) => o.setName("notes").setDescription("Notes on the action").setRequired(false)
);
async function run({ client, interaction }) {
  await interaction.deferReply({ ephemeral: true });
  const action = interaction.options.getString("action");
  const member = interaction.options.getMember("member");
  const before = interaction.options.getRole("before");
  const after = interaction.options.getRole("after");
  const reason = interaction.options.getString("reason");
  const notes = interaction.options.getString("notes");
  if (!interaction.inCachedGuild())
    return;
  if (interaction.member.roles.highest.position <= member.roles.highest.position) {
    await interaction.editReply("\u274C You cannot take this action on a member that is higher than you!");
    return;
  }
  if (!ranks.staffRanks.some((rank) => rank.role === before.id) || !ranks.staffRanks.some((rank) => rank.role === after.id)) {
    await interaction.editReply("\u274C One of the ranks you provided is not a staff rank.");
    return;
  }
  const BRC = emojis.bottomRightCurve;
  const fieldsForEmbed = [
    {
      name: "Member: ",
      value: `${BRC}${member.user} (${member.user.username})`,
      inline: false
    },
    {
      name: "Action by: ",
      value: `${BRC}${interaction.user} (${interaction.user.username})`,
      inline: false
    },
    {
      name: "Rank before: ",
      value: `${BRC}${before}
${BRC}(${before.name})`,
      inline: true
    },
    {
      name: "Rank after: ",
      value: `${BRC}${after}
${BRC}(${after.name})`,
      inline: true
    },
    {
      name: "Reason: ",
      value: `${BRC}${reason}`,
      inline: false
    },
    {
      name: "Notes: ",
      value: `${BRC}${notes ? notes : "N/A"}`,
      inline: true
    }
  ];
  const fieldsForDMEmbed = [
    {
      name: "Action by: ",
      value: `${BRC}${interaction.user} (${interaction.user.username})`,
      inline: false
    },
    {
      name: "Rank before: ",
      value: `${BRC}(${before.name})`,
      inline: true
    },
    {
      name: "Rank after: ",
      value: `${BRC}(${after.name})`,
      inline: true
    },
    {
      name: "Reason: ",
      value: `${BRC}${reason}`,
      inline: false
    },
    {
      name: "Notes: ",
      value: `${BRC}${notes ? notes : "N/A"}`,
      inline: true
    }
  ];
  let embed;
  let DMEmbed;
  if (action === "promote") {
    embed = new EmbedBuilder().setTitle("Promotion.").setColor("Green").setFields(fieldsForEmbed);
    DMEmbed = new EmbedBuilder().setTitle("You have been promoted!").setColor("Green").setFields(fieldsForDMEmbed);
  } else if (action === "demote") {
    embed = new EmbedBuilder().setTitle("Demotion.").setColor("Red").setFields(fieldsForEmbed);
    DMEmbed = new EmbedBuilder().setTitle("You have been demoted!").setColor("Red").setFields(fieldsForDMEmbed);
  } else {
    embed = new EmbedBuilder();
    DMEmbed = new EmbedBuilder();
  }
  await interaction.channel?.send({ content: `||${member.user}||`, embeds: [embed] });
  await member.user.send({ embeds: [DMEmbed] }).catch(() => null);
  await interaction.editReply("\u2705 Success!");
}
__name(run, "run");
var options = {
  useCategoryPerms: true
};
export {
  data,
  options,
  run
};
