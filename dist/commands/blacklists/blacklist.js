/* Optimized production build generated by CommandKit */
import {
  blacklist_default
} from "../../chunk-I7TTWQII.js";
import "../../chunk-I42VWTNA.js";
import "../../chunk-B6G4A3QD.js";
import "../../chunk-JIPSLNKH.js";
import "../../chunk-4UQNO4NA.js";
import "../../chunk-M6BESEGB.js";
import "../../chunk-X2JHQ7O3.js";
import "../../chunk-D2YV6SHV.js";
import "../../chunk-QJI4AMEY.js";
import "../../chunk-VU34SGHU.js";
import "../../chunk-GSB7PNNP.js";
import "../../chunk-WIIT5IFE.js";
import "../../chunk-G4V434ME.js";
import "../../chunk-6MFSAH6G.js";
import "../../chunk-CN2PQJ3T.js";
import "../../chunk-67IWWM7G.js";
import {
  __name
} from "../../chunk-4HQ2LG3N.js";

// src/commands/blacklists/blacklist.ts
import { SlashCommandBuilder } from "discord.js";
var data = new SlashCommandBuilder().setName("blacklist").setDescription("Blacklist stuff.").setDMPermission(false).addSubcommand(
  (s) => s.setName("discord").setDescription("Blacklist a user from the server.").addUserOption(
    (o) => o.setName("member").setDescription("The member to blacklist").setRequired(true)
  ).addStringOption(
    (o) => o.setName("reason").setDescription("The reason of the blacklist.").setRequired(true)
  )
).addSubcommand(
  (s) => s.setName("roblox").setDescription("Blacklist a user from their roblox ID").addNumberOption(
    (o) => o.setName("id").setDescription("ID of the user you want to blacklist.").setRequired(true)
  ).addStringOption(
    (o) => o.setName("reason").setDescription("Reason of the blacklist.").setRequired(true)
  ).addStringOption(
    (o) => o.setName("discord-id").setDescription("Discord ID of the user you want to blacklist.").setRequired(false)
  ).addStringOption(
    (o) => o.setName("discord-name").setDescription("Discord username of the user you want to blacklist.").setRequired(false)
  )
).addSubcommand(
  (s) => s.setName("server").setDescription("Blacklist a server from the server.").addStringOption(
    (o) => o.setName("id").setDescription("ID of the server you want to blacklist.").setRequired(true)
  ).addStringOption(
    (o) => o.setName("server-name").setDescription("Name of the server you want to blacklist.").setRequired(true)
  ).addStringOption(
    (o) => o.setName("reason").setDescription("Reason of the blacklist.").setRequired(true)
  ).addNumberOption(
    (o) => o.setName("roblox-group-id").setDescription("Roblox group ID of the server you want to blacklist.").setRequired(false)
  )
).addSubcommandGroup(
  (sg) => sg.setName("revoke").setDescription("revoke blacklists").addSubcommand(
    (s) => s.setName("user").setDescription("Revoke a user blacklist.").addNumberOption(
      (o) => o.setName("id").setDescription("Roblox ID of the blacklist.").setRequired(true)
    ).addStringOption(
      (o) => o.setName("reason").setDescription("Reason of the revoke.").setRequired(true)
    )
  )
).addSubcommand(
  (s) => s.setName("ban").setDescription("Bans a person from their blacklist.").addStringOption(
    (o) => o.setName("id").setDescription("Discord ID of the person you want to ban").setRequired(true)
  )
);
async function run({ client, handler, interaction }) {
  const subcommand = interaction.options.getSubcommand();
  const subcommandGroup = interaction.options.getSubcommandGroup();
  if (!subcommandGroup) {
    switch (subcommand) {
      case "ban":
        await blacklist_default.ban({ interaction, client });
        break;
      case "discord":
        await blacklist_default.discord({ client, interaction });
        break;
      case "roblox":
        await blacklist_default.roblox({ client, interaction });
        break;
      case "server":
        await blacklist_default.server({ client, interaction });
        break;
    }
  } else {
    switch (subcommandGroup) {
      case "revoke":
        blacklist_default.revoke.user({ client, interaction });
        break;
    }
  }
}
__name(run, "run");
var options = {
  useCategoryPerms: true,
  devOnlySubcommands: ["ban"]
};
export {
  data,
  options,
  run
};
