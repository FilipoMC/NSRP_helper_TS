/* Optimized production build generated by CommandKit */
import {
  emojis,
  main
} from "../../chunk-GSB7PNNP.js";
import "../../chunk-WIIT5IFE.js";
import "../../chunk-G4V434ME.js";
import "../../chunk-6MFSAH6G.js";
import "../../chunk-CN2PQJ3T.js";
import "../../chunk-67IWWM7G.js";
import {
  __name
} from "../../chunk-4HQ2LG3N.js";

// src/commands/sessions/ssu-poll.ts
import { ActionRowBuilder, ButtonBuilder, ButtonStyle, Collection, ComponentType, EmbedBuilder, SlashCommandBuilder } from "discord.js";
import * as ms from "@lukeed/ms";
var data = new SlashCommandBuilder().setName("ssu-poll").setDescription("Send a poll to sessions channel.").setDMPermission(false).addIntegerOption(
  (o) => o.setName("needed").setDescription("Votes needed for SSU to occur.").setRequired(true)
);
async function run({ interaction, client, handler }) {
  await interaction.deferReply({ ephemeral: true });
  const EMBED_TITLE = "SSU poll.";
  const needed = interaction.options.get("needed")?.value;
  const channel = await client.channels.fetch(main.sessionsChannel);
  await channel.messages.fetch();
  for (const [, message] of channel.messages.cache) {
    if (message.embeds.at(0)?.title === EMBED_TITLE) {
      await message.delete();
    }
  }
  const embedContent = needed > 0 ? `**React below if you can attend ssu.**

_We need ${needed} reactions for SSU to happen._` : "**React below if you can attend ssu.**\n\n";
  const embed = new EmbedBuilder().setTitle(EMBED_TITLE).setDescription(embedContent).setFooter({ text: `This poll will expire in 2 hours` }).setColor("#41cd50");
  const attendButtonID = `ssuPollAttend-${interaction.user.id}-${Date.now()}`;
  const checkButtonID = `ssuPollCheck`;
  const row = new ActionRowBuilder({ components: [
    new ButtonBuilder({ customId: attendButtonID, label: "0 - I can attend.", style: ButtonStyle.Success, emoji: emojis.green_checkmark }),
    new ButtonBuilder({ customId: checkButtonID, label: "Check attending members.", style: ButtonStyle.Secondary })
  ] });
  const embedMessage = await channel.send({ content: `||<@&${main.mainRole}>||`, embeds: [embed], components: [row] });
  await embedMessage.pin();
  const lastMessage = (await channel.messages.fetch()).at(0);
  await lastMessage?.delete();
  let attendingUsers = new Collection();
  const attendButtonCollector = embedMessage.createMessageComponentCollector({
    componentType: ComponentType.Button,
    filter: (b) => b.customId === attendButtonID,
    time: ms.parse("2h")
  });
  attendButtonCollector.on("collect", async (subInteraction) => {
    if (!attendingUsers || !attendingUsers.get(subInteraction.user.id)) {
      attendingUsers.set(subInteraction.user.id, subInteraction.user);
      subInteraction.reply({ ephemeral: true, content: "You are required to attend the SSU!" });
    } else {
      attendingUsers.delete(subInteraction.user.id);
      subInteraction.reply({ ephemeral: true, content: "You are no longer required to attend the SSU." });
    }
    const editedButton = new ButtonBuilder({ customId: attendButtonID, label: `${attendingUsers.size} - I can attend.`, style: ButtonStyle.Success, emoji: emojis.green_checkmark });
    const checkButton = new ButtonBuilder({ customId: checkButtonID, label: "Check attending members.", style: ButtonStyle.Secondary });
    const editedRow = new ActionRowBuilder({ components: [editedButton, checkButton] });
    await embedMessage.edit({ components: [editedRow] });
  });
  attendButtonCollector.on("end", async () => {
    const editedButton = new ButtonBuilder({
      customId: attendButtonID,
      label: `${attendingUsers.size} - I can attend.`,
      style: ButtonStyle.Success,
      emoji: emojis.green_checkmark,
      disabled: true
    });
    const checkButton = new ButtonBuilder({ customId: checkButtonID, label: "Check attending members.", style: ButtonStyle.Secondary });
    const editedRow = new ActionRowBuilder({ components: [editedButton, checkButton] });
    await embedMessage.edit({ components: [editedRow] });
  });
  const checkButtonCollector = embedMessage.createMessageComponentCollector({
    filter: (b) => b.customId === checkButtonID
  });
  checkButtonCollector.on("collect", async (subInteraction) => {
    let embedDescription = "";
    if (attendingUsers.size > 0) {
      for (const [, member] of attendingUsers) {
        embedDescription += `${member} (${member.username})
`;
      }
    } else {
      embedDescription = "There are no attending members!";
    }
    const embed2 = new EmbedBuilder().setTitle("Attending members: ").setDescription(embedDescription).setColor("Green");
    subInteraction.reply({ ephemeral: true, embeds: [embed2] });
  });
  await interaction.followUp("\u2705 Sent SSU poll to sessions channel.");
}
__name(run, "run");
var options = {
  useCategoryPerms: true
};
export {
  data,
  options,
  run
};
