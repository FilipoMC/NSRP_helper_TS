/* Optimized production build generated by CommandKit */
import {
  updateSessionStatus_default
} from "../../chunk-VZJSD2ND.js";
import {
  emojis,
  main
} from "../../chunk-GSB7PNNP.js";
import "../../chunk-WIIT5IFE.js";
import {
  images_default
} from "../../chunk-G4V434ME.js";
import "../../chunk-6MFSAH6G.js";
import "../../chunk-CN2PQJ3T.js";
import "../../chunk-67IWWM7G.js";
import {
  __name
} from "../../chunk-4HQ2LG3N.js";

// src/commands/sessions/session.ts
import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } from "discord.js";
var data = new SlashCommandBuilder().setName("session").setDescription("Send an update to the sessions channel.").setDMPermission(false).addStringOption(
  (o) => o.setName("status").setDescription("Server status.").setRequired(true).setChoices([
    { name: "Server Start Up.", value: "ssu" },
    { name: "Server Shut Down.", value: "ssd" },
    { name: "Server Crash.", value: "crash" },
    { name: "Server Restart.", value: "restart" },
    { name: "SSU reminder.", value: "reminder" }
  ])
);
async function run({ client, handler, interaction }) {
  await interaction.deferReply({ ephemeral: true });
  const status = interaction.options.get("status")?.value;
  let embed;
  let ping;
  switch (status) {
    case "ssu":
      embed = new EmbedBuilder().setTitle("Server start up!").setColor(4312400).setDescription(
        `**Code:** EeTnU
**Join link:** https://policeroleplay.community/join/EeTnU
**--------**
**Host:** ${interaction.user}`
      ).setImage(images_default.SSUImgUrl);
      ping = `||<@&${main.mainRole}>||`;
      await updateSessionStatus_default(client, "ssu");
      break;
    case "ssd":
      embed = new EmbedBuilder().setTitle("Server shut down!").setColor(12992062).setImage(images_default.SSDImgUrl);
      ping = "";
      await updateSessionStatus_default(client, "ssd");
      break;
    case "restart":
      embed = new EmbedBuilder().setTitle("Server restart!").setColor(12438849).setImage(images_default.RestartImgUrl).setDescription(`**By:** ${interaction.user}`);
      ping = "||@here||";
      break;
    case "crash":
      embed = new EmbedBuilder().setTitle("Server crash!").setColor(11740940).setImage(images_default.CrashImgUrl).setDescription(`**By:** ${interaction.user}`);
      ping = "||@here||";
      break;
    case "reminder":
      embed = new EmbedBuilder().setTitle("SSU reminder").setColor("Blue").setDescription("This is a reminder that there is on going SSU! Let's get more players on! Come join to have fun roleplaying!");
      ping = `||<@&${main.mainRole}>||`;
      break;
  }
  const channel = interaction.guild?.channels.cache.get(main.sessionsChannel);
  const channelMessages = await channel.messages.fetch();
  for (const [, message2] of channelMessages) {
    if (status === "ssu") {
      if (!message2.pinned) {
        await message2.delete();
      }
    } else if (status === "ssd") {
      await message2.delete();
    }
  }
  const message = await channel.send({
    content: ping,
    embeds: [
      embed
    ]
  });
  if (status === "ssu") {
    const EMBED_TITLE = "SSU poll.";
    const checkButtonID = `ssuPollCheck`;
    for (const [, message2] of channel.messages.cache) {
      if (message2.embeds.at(0)?.title === EMBED_TITLE) {
        const attendButton = message2.components.at(0)?.components.at(0);
        if (attendButton?.type !== ComponentType.Button)
          return;
        if (!attendButton.label)
          return;
        const editedButton = new ButtonBuilder({
          customId: "disabled",
          label: attendButton.label,
          style: ButtonStyle.Success,
          emoji: emojis.green_checkmark,
          disabled: true
        });
        const checkButton = new ButtonBuilder({ customId: checkButtonID, label: "Check attending members.", style: ButtonStyle.Secondary });
        const editedRow = new ActionRowBuilder({ components: [editedButton, checkButton] });
        await message2.edit({ components: [editedRow] });
      }
    }
  }
  await interaction.followUp("\u2705 Sent session update to sessions channel.");
}
__name(run, "run");
var options = {
  useCategoryPerms: true
};
export {
  data,
  options,
  run
};
