/* Optimized production build generated by CommandKit */
import {
  dev_default
} from "../../chunk-7P3MKFL5.js";
import "../../chunk-ZXSDSWJV.js";
import "../../chunk-XMMSODPM.js";
import "../../chunk-BMGEZPRS.js";
import "../../chunk-H54QUDOS.js";
import "../../chunk-LANNV5D6.js";
import "../../chunk-QJI4AMEY.js";
import "../../chunk-7AILDUPC.js";
import "../../chunk-PGMA3JWT.js";
import "../../chunk-GSB7PNNP.js";
import "../../chunk-WIIT5IFE.js";
import "../../chunk-G4V434ME.js";
import "../../chunk-6MFSAH6G.js";
import "../../chunk-CN2PQJ3T.js";
import "../../chunk-67IWWM7G.js";
import {
  __name
} from "../../chunk-4HQ2LG3N.js";

// src/commands/devOnly/dev.ts
import { SlashCommandBuilder } from "discord.js";
var data = new SlashCommandBuilder().setName("dev").setDescription("dev stufff").setDMPermission(false).addSubcommandGroup(
  (sg) => sg.setName("action").setDescription("Actions like restart.").addSubcommand(
    (s) => s.setName("restart").setDescription("Restart the bot.")
  ).addSubcommand(
    (s) => s.setName("fix-partnership-invites").setDescription("Fix partnership invites.")
  )
).addSubcommandGroup(
  (sg) => sg.setName("database").setDescription("Database stuff").addSubcommand(
    (s) => s.setName("delete-doc").setDescription("Delete a document from a model.").addStringOption(
      (o) => o.setName("model").setDescription("The model to delete the doc from.").setRequired(true).setChoices([
        { name: "Blacklist.", value: "blacklist" },
        { name: "Partnership", value: "partnership" }
      ])
    ).addStringOption(
      (o) => o.setName("id").setDescription("Main ID of the doc.").setRequired(true)
    )
  )
);
async function run({ client, interaction }) {
  const subcommandGroup = interaction.options.getSubcommandGroup();
  const subcommand = interaction.options.getSubcommand();
  if (subcommandGroup === "database") {
    switch (subcommand) {
      case "delete-doc":
        await dev_default.database.delete({ interaction, client });
        break;
    }
  } else if (subcommandGroup === "action") {
    switch (subcommand) {
      case "restart":
        await dev_default.action.restart({ interaction, client });
        break;
      case "fix-partnership-invites":
        await dev_default.action.fixPartnershipInvites({ interaction, client });
        break;
    }
  }
}
__name(run, "run");
var options = {
  globalDevOnly: true
};
export {
  data,
  options,
  run
};
