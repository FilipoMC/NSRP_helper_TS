/* Optimized production build generated by CommandKit */
import {
  emojis,
  punishments,
  ranks
} from "../../chunk-GSB7PNNP.js";
import "../../chunk-WIIT5IFE.js";
import "../../chunk-G4V434ME.js";
import "../../chunk-6MFSAH6G.js";
import "../../chunk-CN2PQJ3T.js";
import "../../chunk-67IWWM7G.js";
import {
  __name
} from "../../chunk-4HQ2LG3N.js";

// src/commands/IA/punish-staff.ts
import { EmbedBuilder, SlashCommandBuilder } from "discord.js";
var data = new SlashCommandBuilder().setName("punish-staff").setDescription("Punish a staff member.").setDMPermission(false).addUserOption(
  (o) => o.setName("member").setDescription("The member to punish.").setRequired(true)
).addRoleOption(
  (o) => o.setName("punishment").setDescription("The punishment. (Punishment role)").setRequired(true)
).addStringOption(
  (o) => o.setName("reason").setDescription("Reason of the punishment").setRequired(true)
).addStringOption(
  (o) => o.setName("notes").setDescription("Notes to the punishment. (Do not mention roles)").setRequired(false)
).addBooleanOption(
  (o) => o.setName("appealable").setDescription("Is this punishment appealable? (Default: yes)").setRequired(false)
);
var fail = emojis.red_cross;
var success = emojis.green_checkmark;
async function run({ interaction, client }) {
  await interaction.deferReply({ ephemeral: true });
  const member = interaction.options.getMember("member");
  const punishment = interaction.options.getRole("punishment");
  const reason = interaction.options.getString("reason");
  const notes = interaction.options.getString("notes");
  const appealable = interaction.options.getBoolean("appealable");
  if (!member.roles.cache.has(ranks.categories.staff)) {
    await interaction.followUp(`${fail} This member is not a staff member. If possible, use Wick's commands, if not, use /punish-member.`);
    return;
  }
  if (!punishments.punishmentsId.includes(punishment.id)) {
    interaction.editReply(`${fail} This role is not a punishment!`);
    return;
  }
  const BRC = emojis.bottomRightCurve;
  const fieldsForEmbed = [
    {
      name: "Member: ",
      value: `${BRC}${member.user} (${member.user.username})`,
      inline: false
    },
    {
      name: "Punished by: ",
      value: `${BRC}${interaction.user} (${interaction.user.username})`,
      inline: true
    },
    {
      name: "Punishment: ",
      value: `${BRC}${punishment} (${punishment.name})`,
      inline: false
    },
    {
      name: "Reason: ",
      value: `${BRC}${reason}`,
      inline: false
    },
    {
      name: "Notes: ",
      value: `${BRC}${notes ? notes : "N/A"}`,
      inline: true
    },
    {
      name: "Appealable: ",
      value: `${BRC}${appealable === false ? "No" : "Yes"}`,
      inline: true
    }
  ];
  const fieldsForDMEmbed = [
    {
      name: "Punished by: ",
      value: `${BRC}${interaction.user} (${interaction.user.username})`,
      inline: true
    },
    {
      name: "Punishment: ",
      value: `${BRC}${punishment.name}`,
      inline: false
    },
    {
      name: "Notes: ",
      value: `${BRC}${notes ? notes : "N/A"}`,
      inline: true
    },
    {
      name: "Appealable: ",
      value: `${BRC}${appealable === false ? "No" : "Yes"}`,
      inline: true
    }
  ];
  const embed = new EmbedBuilder().setTitle("Punishment").setFields(fieldsForEmbed).setColor("Red");
  const DMEmbed = new EmbedBuilder().setTitle("You have been punished.").setFields(fieldsForDMEmbed).setColor("Red");
  await interaction.channel?.send({ embeds: [embed], content: `||${member.user}||` });
  await member.send({ embeds: [DMEmbed] }).catch(() => null);
  if (punishment.id !== punishments.fired && punishment.id !== punishments.verbalWarn) {
    let dr = false;
    await member.roles.add(punishment.id).catch(async () => {
      await interaction.editReply(`${fail} I couldn't add the role to the user! Do it yourself.`);
      dr = true;
    });
    if (dr)
      return;
  }
  await interaction.editReply(`${success} Success!`);
}
__name(run, "run");
var options = {
  // neededRoles: [config.ranks.categories.ia, config.ranks.categories.mg],
  useCategoryPerms: true
};
export {
  data,
  options,
  run
};
