/* Optimized production build generated by CommandKit */
import {
  MPartnership
} from "./chunk-7AILDUPC.js";
import {
  getFirstDiscordInviteFromString
} from "./chunk-PGMA3JWT.js";
import {
  config_default
} from "./chunk-67IWWM7G.js";
import {
  __name
} from "./chunk-4HQ2LG3N.js";

// src/subcommands/partner/src/create.ts
import { parse as ms } from "@lukeed/ms";
import { ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } from "discord.js";
async function create_default({ interaction, client }) {
  const rep = interaction.options.get("rep")?.member;
  const ping = interaction.options.getBoolean("ping");
  const prompt = interaction.options.getBoolean("prompt");
  const pingReady = ping ? `<@&${config_default.partnerPingRole}>
` : "";
  const partnerChannel = interaction.guild?.channels.cache.get(config_default.partnerChannel);
  const partnerLogsChannel = interaction.guild?.channels.cache.get(config_default.partnerLogChannel);
  const modalCustomID = `pCreate-${interaction.user.id}-${interaction.id}`;
  const partnershipModal = new ModalBuilder().setTitle("Partnership").setCustomId(modalCustomID).setComponents([
    new ActionRowBuilder().setComponents([
      new TextInputBuilder().setCustomId("serverAd").setLabel("Server Ad").setStyle(TextInputStyle.Paragraph).setMaxLength(3950).setRequired(true)
    ])
  ]);
  await interaction.showModal(partnershipModal);
  const modalInteraction = await interaction.awaitModalSubmit({ time: 6e4, filter: (m) => m.customId === modalCustomID }).catch(() => null);
  if (!modalInteraction)
    return;
  await modalInteraction.deferReply({ ephemeral: true });
  const serverAd = modalInteraction.fields.getTextInputValue("serverAd");
  const serverInvite = getFirstDiscordInviteFromString(serverAd);
  if (!serverInvite) {
    await interaction.followUp({ content: "\u274C Invite not found in the ad.", ephemeral: true });
    return;
  }
  const tempCheck = await MPartnership.findOne({ invite: serverInvite });
  if (tempCheck) {
    await interaction.followUp({ content: `\u274C This server invite is already partnered. Partnership id: ${tempCheck.logMessageID}`, ephemeral: true });
    return;
  }
  const logEmbed = new EmbedBuilder().setTitle("New Partnership.").setDescription(
    "Server Ad:\n```" + serverAd + `\`\`\`
Invite: https://${serverInvite}
By: ${interaction.user}
Rep: ${rep.user}`
  );
  if (!prompt) {
    const message = await partnerChannel.send(
      serverAd + "\n``` ```\n" + pingReady + `Rep: ${rep.user}`
    );
    const logMessage = await partnerLogsChannel.send({ embeds: [logEmbed] });
    await rep.roles.add(config_default.partnerRole);
    await MPartnership.create({
      ad: serverAd,
      by: interaction.user.id,
      invite: serverInvite,
      messageID: message.id,
      logMessageID: logMessage.id,
      rep: rep.user.id
    });
    await modalInteraction.editReply("\u2705 Success!");
    await rep.user.send(`Your partnership id is ${logMessage.id}`).catch(() => null);
    return;
  } else {
    const promptEmbed = new EmbedBuilder().setTitle("Confirmation").setDescription(
      `${interaction.user} has requested you to send our server's ad.
Once you've done it, press the button bellow for your ad to be sent.`
    ).setColor("Green").setFooter({ text: "This prompt will expire in 24 hours." });
    const buttonID = `partner-prompt-button-${rep.id}-${Date.now()}`;
    const row = new ActionRowBuilder({ components: [
      new ButtonBuilder({ customId: buttonID, label: "I've sent the ad.", style: ButtonStyle.Success })
    ] });
    const promptMessage = await interaction.channel?.send({ content: `${rep.user}`, embeds: [promptEmbed], components: [row] });
    if (!promptMessage)
      return;
    await modalInteraction.editReply("\u2705 Success!");
    const buttonInteraction = await promptMessage.awaitMessageComponent({ componentType: ComponentType.Button, filter: (b) => b.customId === buttonID, time: ms("24h") }).catch(() => null);
    if (buttonInteraction) {
      const message = await partnerChannel.send(
        serverAd + "\n``` ```\n" + pingReady + `Rep: ${rep.user}`
      );
      const logMessage = await partnerLogsChannel.send({ embeds: [logEmbed] });
      await rep.roles.add(config_default.partnerRole);
      await MPartnership.create({
        ad: serverAd,
        by: interaction.user.id,
        invite: serverInvite,
        messageID: message.id,
        logMessageID: logMessage.id,
        rep: rep.user.id
      });
      await buttonInteraction?.reply(`\u2705 Ad sent. Partnership id: ${logMessage.id}`);
      await rep.user.send(`Your partnership id is ${logMessage.id}`).catch(() => null);
    }
  }
}
__name(create_default, "default");

export {
  create_default
};
