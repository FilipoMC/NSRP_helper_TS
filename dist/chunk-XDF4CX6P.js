/* Optimized production build generated by CommandKit */
import {
  main,
  ranks
} from "./chunk-GSB7PNNP.js";
import {
  MActivityCheck
} from "./chunk-A4QB62XD.js";
import {
  __name
} from "./chunk-4HQ2LG3N.js";

// src/subcommands/activity-test/src/create.ts
import { ButtonKit } from "commandkit";
import { ActionRowBuilder, EmbedBuilder } from "discord.js";
import { ButtonStyle } from "discord.js";
import * as ms from "@lukeed/ms";
import { v4 as uuid } from "uuid";
async function create_default({ interaction }) {
  await interaction.deferReply({ ephemeral: true });
  if (!interaction.inCachedGuild())
    return;
  for (const [, member] of (await interaction.guild.roles.fetch(main.activityTestRole)).members) {
    if (member.roles.cache.has(main.activityTestRole)) {
      member.roles.remove(main.activityTestRole);
    }
  }
  const time = interaction.options.getString("time");
  const timeMS = ms.parse(time);
  if (timeMS === void 0) {
    await interaction.editReply("The time you provided is invalid.");
    return;
  }
  const activeButtonCustomID = uuid();
  const activeButton = new ButtonKit().setLabel("I'm active!").setStyle(ButtonStyle.Success).setCustomId(activeButtonCustomID);
  const row = new ActionRowBuilder().setComponents(activeButton);
  const activityTestID = uuid();
  const deadline = new Date(Date.now() + timeMS);
  const deadlineTimeStamp = Math.floor(deadline.getTime() / 1e3);
  const activityTestDocument = await MActivityCheck.create({
    ID: activityTestID,
    buttonID: activeButtonCustomID,
    createdBy: interaction.user.id,
    deadline,
    employeesReacted: []
  });
  const employeesReactedTempArray = [];
  const activityCheckEmbed = new EmbedBuilder().setTitle("Activity test").setDescription(
    `Click the button below to confirm that you are active
Failure to do so will result in a punishment
Deadline: <t:${deadlineTimeStamp}:R>`
  ).setFooter({ text: `AC ID: ${activityTestID}` }).setColor("Green");
  const channel = await interaction.client.channels.fetch(main.activityTestsChannel);
  if (!channel?.isTextBased())
    return;
  const message = await channel.send({ content: `<@&${ranks.categories.staff}>`, embeds: [activityCheckEmbed], components: [row] });
  activeButton.onClick(
    async (subInteraction) => {
      if (!subInteraction.member)
        return;
      if (!subInteraction.inCachedGuild())
        return;
      if (!subInteraction.member.roles.cache.has(main.activityTestRole)) {
        await subInteraction.member.roles.add(main.activityTestRole);
        employeesReactedTempArray.push(subInteraction.user.id);
        await activityTestDocument.updateOne({ $set: {
          membersReacted: employeesReactedTempArray
        } });
        await subInteraction.reply({ ephemeral: true, content: "Marked as active." });
      } else {
        await subInteraction.reply({ ephemeral: true, content: "You have already reacted to this activity check!" });
      }
    },
    {
      message,
      time: timeMS,
      autoReset: false
    }
  );
  activeButton.onEnd(
    async () => {
      const buttonJSON = activeButton.toJSON();
      const disabledButton = new ButtonKit().setCustomId("disabled").setDisabled(true).setStyle(buttonJSON.style);
      if (buttonJSON.emoji) {
        disabledButton.setEmoji(buttonJSON.emoji);
      }
      if (buttonJSON.label) {
        disabledButton.setLabel(buttonJSON.label);
      }
      const disabledRow = new ActionRowBuilder().setComponents(disabledButton);
      message.edit({ components: [disabledRow] });
    }
  );
  await interaction.editReply("Success!");
}
__name(create_default, "default");

export {
  create_default
};
