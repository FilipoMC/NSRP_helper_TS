/* Optimized production build generated by CommandKit */
import {
  ranks
} from "../chunk-GSB7PNNP.js";
import "../chunk-WIIT5IFE.js";
import "../chunk-G4V434ME.js";
import "../chunk-6MFSAH6G.js";
import "../chunk-CN2PQJ3T.js";
import "../chunk-67IWWM7G.js";
import {
  __name
} from "../chunk-4HQ2LG3N.js";

// src/validations/categoryPerms.ts
function categoryPerms_default({ client, commandObj, interaction, handler }) {
  if (!interaction.inCachedGuild())
    return;
  if (!commandObj.options?.useCategoryPerms)
    return;
  const int = interaction;
  const cat = commandObj.category;
  let permRoles;
  switch (cat) {
    case "IA":
      permRoles = [ranks.categories.ia, ranks.categories.mg];
      break;
    case "MG":
      permRoles = [ranks.categories.mg];
      break;
    case "staff":
      permRoles = [ranks.categories.staff];
      break;
    case "blacklists":
      permRoles = false;
      break;
    case "partnership":
      permRoles = [ranks.categories.mg];
      break;
    case "sessions":
      permRoles = [ranks.other.ssuPerms];
      break;
    default:
      permRoles = false;
  }
  if (permRoles === false)
    return;
  let hasPerms = false;
  if (interaction.member.roles.cache.has(ranks.categories.ls))
    hasPerms = true;
  for (const role of permRoles) {
    if (interaction.member?.roles.cache.has(role))
      hasPerms = true;
  }
  if (!hasPerms) {
    int.reply({ content: "\u274C You don't have permissions to run this command!", ephemeral: true });
    return true;
  }
}
__name(categoryPerms_default, "default");
export {
  categoryPerms_default as default
};
