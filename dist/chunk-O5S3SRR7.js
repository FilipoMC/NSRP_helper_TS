/* Optimized production build generated by CommandKit */
import {
  MPartnership
} from "./chunk-7AILDUPC.js";
import {
  main
} from "./chunk-GSB7PNNP.js";
import {
  __name
} from "./chunk-4HQ2LG3N.js";

// src/subcommands/partner/src/terminate.ts
import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } from "discord.js";
import { parse as ms } from "@lukeed/ms";
async function terminate_default({ interaction, client }) {
  await interaction.deferReply({ ephemeral: true });
  const id = interaction.options.getString("id");
  const reason = interaction.options.getString("reason");
  const document = await MPartnership.findOneAndDelete({ logMessageID: id });
  if (!document) {
    await interaction.followUp("Partnership not found.");
    return;
  }
  const partnerChannel = await client.channels.fetch(main.partnerChannel);
  const partnerLogChannel = await client.channels.fetch(main.partnerLogChannel);
  if (!partnerChannel?.isTextBased() || !partnerLogChannel?.isTextBased())
    return;
  const messageURL = `https://discord.com/channels/${main.mainServer}/${main.partnerChannel}/${document.messageID}`;
  const logMessageURL = `https://discord.com/channels/${main.mainServer}/${main.partnerLogChannel}/${document.logMessageID}`;
  const embed = new EmbedBuilder().setTitle("Terminated Partnership:").setDescription(
    `**Made by:** <@!${document.by}> (${document.by})
**Rep:** <@!${document.rep}> (${document.rep})
**Ad:** Press the button below.
**Message ID: ** [${document.messageID}](${messageURL})
**Log message ID:** [${document.logMessageID}](${logMessageURL})`
  ).setColor("Green");
  const logEmbed = new EmbedBuilder().setTitle("Partnership terminated.").setDescription(
    "Server Ad:\n```" + document.ad + `\`\`\`
By: <@!${document.by}>
Rep: <@!${document.rep}>
Terminated by: <@!${interaction.user.id}>
Reason: ${reason}`
  ).setColor("Red");
  const buttonID = `partner-find-${interaction.user.id}-${Date.now()}`;
  const actionRow = new ActionRowBuilder({ components: [new ButtonBuilder({ customId: buttonID, label: "Server ad", style: ButtonStyle.Success })] });
  const sentMessage = await interaction.followUp({ embeds: [embed], components: [actionRow] });
  await partnerLogChannel.send({ embeds: [logEmbed] });
  try {
    (await partnerChannel.messages.fetch(document.messageID)).delete();
    (await partnerLogChannel.messages.fetch(document.logMessageID)).delete();
  } catch (error) {
    await interaction.followUp({ ephemeral: true, content: "\u274C Couldn't delete message or log message" });
  }
  const collector = sentMessage.createMessageComponentCollector({ componentType: ComponentType.Button, filter: (b) => b.customId === buttonID, time: ms("5m") });
  collector.on("collect", async (subInteraction) => {
    subInteraction.reply({ ephemeral: true, content: `\`\`\` ${document.ad} \`\`\`` });
  });
}
__name(terminate_default, "default");

export {
  terminate_default
};
